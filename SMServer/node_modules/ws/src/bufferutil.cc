/*This file is based on or incorporates material from the projects listed below 
(collectively, “Third Party Code”).   Microsoft is not the original author 
of the Third Party Code.   
The original copyright notice and the license, under which Microsoft received 
such Third Party Code, are set forth below.  
Such licenses and notices are provided for informational purposes only.  
Microsoft, not the third party, licenses the Third Party Code to you under the terms 
set forth in the EULA for the Microsoft Product.  Microsoft reserves all other rights 
not expressly granted under this agreement, whether by implication, estoppel or otherwise.  

http://einaros.github.com/ws

  ws: a node.js websocket client
  Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>
  MIT Licensed

Provided for Informational Purposes Only
MIT License

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:
The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/



#include <v8.h>
#include <node.h>
#include <node_buffer.h>
#include <node_object_wrap.h>
#include <stdlib.h>
#include <string.h>
#include <wchar.h>
#include <stdio.h>

using namespace v8;
using namespace node;

class BufferUtil : public ObjectWrap
{
public:
  
  static void Initialize(v8::Handle<v8::Object> target)
  {
    HandleScope scope;
    Local<FunctionTemplate> t = FunctionTemplate::New(New);
    t->InstanceTemplate()->SetInternalFieldCount(1);
    NODE_SET_METHOD(t->GetFunction(), "unmask", BufferUtil::Unmask);
    NODE_SET_METHOD(t->GetFunction(), "mask", BufferUtil::Mask);
    NODE_SET_METHOD(t->GetFunction(), "merge", BufferUtil::Merge);
    target->Set(String::NewSymbol("BufferUtil"), t->GetFunction());
  }
  
protected:
  
  static Handle<Value> New(const Arguments& args)
  {
    HandleScope scope;
    BufferUtil* bufferUtil = new BufferUtil();
    bufferUtil->Wrap(args.This());
    return args.This();
  }

  static Handle<Value> Merge(const Arguments& args)
  {
    HandleScope scope;
    Local<Object> bufferObj = args[0]->ToObject();
    char* buffer = Buffer::Data(bufferObj);
    Local<Array> array = Local<Array>::Cast(args[1]);
    uint arrayLength = array->Length();
    uint offset = 0;
    uint i;
    for (i = 0; i < arrayLength; ++i) {
      Local<Object> src = array->Get(i)->ToObject();
      uint length = Buffer::Length(src);
      memcpy(buffer + offset, Buffer::Data(src), length);
      offset += length;
    }
    return scope.Close(True());
  }

  static Handle<Value> Unmask(const Arguments& args)
  {
    HandleScope scope;
    Local<Object> buffer_obj = args[0]->ToObject();
    uint length = Buffer::Length(buffer_obj);
    Local<Object> mask_obj = args[1]->ToObject();
    uint *mask = (uint*)Buffer::Data(mask_obj);
    uint* from = (uint*)Buffer::Data(buffer_obj);
    uint len32 = length / 4;
    uint i;
    for (i = 0; i < len32; ++i) *(from + i) ^= *mask;  
    from += i;
    switch (length % 4) {
      case 3: *((unsigned char*)from+2) = *((unsigned char*)from+2) ^ ((unsigned char*)mask)[2];
      case 2: *((unsigned char*)from+1) = *((unsigned char*)from+1) ^ ((unsigned char*)mask)[1];
      case 1: *((unsigned char*)from  ) = *((unsigned char*)from  ) ^ ((unsigned char*)mask)[0];
      case 0:;
    }
    return True();
  }
   
  static Handle<Value> Mask(const Arguments& args)
  {
    HandleScope scope;
    Local<Object> buffer_obj = args[0]->ToObject();
    Local<Object> mask_obj = args[1]->ToObject();
    uint *mask = (uint*)Buffer::Data(mask_obj);
    Local<Object> output_obj = args[2]->ToObject();
    uint dataOffset = args[3]->Int32Value();
    uint length = args[4]->Int32Value();
    uint* to = (uint*)(Buffer::Data(output_obj) + dataOffset);
    uint* from = (uint*)Buffer::Data(buffer_obj);
    uint len32 = length / 4;
    uint i;
    for (i = 0; i < len32; ++i) *(to + i) = *(from + i) ^ *mask;  
    to += i;
    from += i;
    switch (length % 4) {
      case 3: *((unsigned char*)to+2) = *((unsigned char*)from+2) ^ *((unsigned char*)mask+2);
      case 2: *((unsigned char*)to+1) = *((unsigned char*)from+1) ^ *((unsigned char*)mask+1);
      case 1: *((unsigned char*)to  ) = *((unsigned char*)from  ) ^ *((unsigned char*)mask);
      case 0:;
    }
    return True();
  }
};

extern "C" void init (Handle<Object> target)
{
  HandleScope scope;
  BufferUtil::Initialize(target);
}

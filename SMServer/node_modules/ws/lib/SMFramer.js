/*
---------------------------------------
HTTPbis
Copyright Microsoft Open Technologies, Inc.
---------------------------------------
Microsoft Reference Source License.

This license governs use of the accompanying software. 
If you use the software, you accept this license. 
If you do not accept the license, do not use the software.

1. Definitions

The terms "reproduce," "reproduction," and "distribution" have the same meaning here 
as under U.S. copyright law.
"You" means the licensee of the software.
"Your company" means the company you worked for when you downloaded the software.
"Reference use" means use of the software within your company as a reference, in read only form, 
for the sole purposes of debugging your products, maintaining your products, 
or enhancing the interoperability of your products with the software, 
and specifically excludes the right to distribute the software outside of your company.
"Licensed patents" means any Licensor patent claims which read directly on the software 
as distributed by the Licensor under this license. 

2. Grant of Rights
(A) Copyright Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, 
non-exclusive, worldwide, royalty-free copyright license to reproduce the software for reference use.
(B) Patent Grant- Subject to the terms of this license, the Licensor grants you a non-transferable, 
non-exclusive, worldwide, royalty-free patent license under licensed patents for reference use. 

3. Limitations
(A) No Trademark License- This license does not grant you any rights 
to use the Licensorâ€™s name, logo, or trademarks.
(B) If you begin patent litigation against the Licensor over patents that you think may apply 
to the software (including a cross-claim or counterclaim in a lawsuit), your license 
to the software ends automatically. 
(C) The software is licensed "as-is." You bear the risk of using it. 
The Licensor gives no express warranties, guarantees or conditions. 
You may have additional consumer rights under your local laws 
which this license cannot change. To the extent permitted under your local laws, 
the Licensor excludes the implied warranties of merchantability, 
fitness for a particular purpose and non-infringement. 

-----------------End of License---------*/


var BufferPool = require('./BufferPool')
  , bufferUtil = require('./BufferUtil').BufferUtil
  , SMFrameType = require('./SMFrameType')
  , Validation = require('./Validation').Validation;

/**
 * Speed+Mobility framer class. Contains logic for frames serialization/deserialization
 */
function SMFramer() {
	Object.defineProperty(this, 'FLAG_FIN', { writable: false, value: 0x01 });
	Object.defineProperty(this, 'FLAG_UNIDIRECTIONAL', { writable: false, value: 0x02 });
}

/**
 * Serializes specified frame to binary format
 * @api public
 */
SMFramer.prototype.serialize = function(frame) {
	return (frame.control ? serializeControlFrame(frame) : serializeDataFrame(frame));
}

/**
 * Deserializes specified binary data to frame
 * @api public
 */
SMFramer.prototype.deserialize = function(data) {
	var isControl = (data[0] & (1<<7)) != 0;
	return (isControl ? deserializeControlFrame(data) : deserializeDataFrame(data));
}

module.exports = SMFramer;

/**
 * Private api
 */

function deserializeControlFrame(data) {
	var frame = { 
		control: 1,
		version: 	readUInt16BE.call(data, 0, 1),
		type: 		readUInt16BE.call(data, 2),
		flags: 		data[4],
		length: 	readUInt32BE.call(data, 5, 3),
		streamId: 	readUInt32BE.call(data, 8, 4, 1),
		fin:		data[4]// & SMFramer.FLAG_FIN
	};

	if (frame.type == SMFrameType.RST) {
		frame.statusCode = readUInt32BE.call(data, 12);
	} else if (frame.type == SMFrameType.HEADERS || frame.type == SMFrameType.SYN_REPLY) {
		parseControlFrameHeaders(frame, data, 12);
	} else if (frame.type == SMFrameType.SYN_STREAM) {
		frame.associatedToStreamId = readUInt32BE.call(data, 12, 4, 1);
		frame.priority = (data[16] & 0x7);
		frame.slot = data[17];
		parseControlFrameHeaders(frame, data, 20);		
	}

	return frame;
}

function parseControlFrameHeaders(frame, data, offset) {
	frame.headers = {};
	var headersCount = readUInt32BE.call(data, offset, 4);
	offset += 4;

	for (var i = 0; i < headersCount; ++i) {
		var nameLength = readUInt32BE.call(data, offset, 4);
		offset += 4;

        var messageBuffer = data.slice(offset, offset + nameLength);
        if (!Validation.isValidUTF8(messageBuffer)) {
			// add error processing here
        }
		var name = messageBuffer.toString('utf8');
		offset += nameLength;

		var valLength = readUInt32BE.call(data, offset, 4);
		offset += 4;
		messageBuffer = data.slice(offset, offset + valLength);
        if (!Validation.isValidUTF8(messageBuffer)) {
			// add error processing here
        }
		var val = messageBuffer.toString('utf8');
		offset += valLength;

        frame.headers[name] = val;
	}
}

function deserializeDataFrame(data) {
	var frame = { 
		control: 	0,
		streamId: 	readUInt32BE.call(data, 0, 4, 1),
		flags: 		data[4],
		length: 	readUInt32BE.call(data, 0, 3)
	};
	frame.data = new Buffer(frame.length);
	data.copy(frame.data, 8, 0, frame.length);

	return frame;	
}

function serializeControlFrame(frame) {
	var bufferSize = 12;

	if (frame.type == SMFrameType.RST) {
		bufferSize += 4;
	}
	else {
		if (frame.type == SMFrameType.SYN_STREAM) bufferSize += 8;

		bufferSize += 4;
		for (header in frame.headers) {
			bufferSize += (4 + Buffer.byteLength(header, 'utf8'));
			bufferSize += (4 + Buffer.byteLength(frame.headers[header], 'utf8'));
		}	
	}

	var data = new Buffer(bufferSize);
	var offset = 0;
	data[offset] = (((frame.version & 0xFF00) >> 8) | 0x80);
	data[++offset] = (frame.version & 0x00FF);

	data[++offset] = ((frame.type & 0xFF00) >> 8);
	data[++offset] = (frame.type & 0x00FF);

	data[++offset] = frame.flags;
	
	frame.length = bufferSize - 8;
	writeUInt32BE.call(data, frame.length, ++offset, 3);
	offset += 3;
	writeUInt32BE.call(data, frame.streamId, offset, 4);
	offset += 4;

	if (frame.type == SMFrameType.RST) {
		writeUInt32BE.call(data, frame.statusCode, offset, 4);
	}
	else if (frame.type == SMFrameType.SYN_STREAM) {
		writeUInt32BE.call(data, frame.associatedToStreamId, offset, 4);
		offset += 4;
		data[++offset] = frame.priority;
		data[++offset] = frame.slot;
		data[++offset] = 0;
		data[++offset] = 0;	
	}	

	if (frame.type != SMFrameType.RST) {
		writeUInt32BE.call(data, Object.keys(frame.headers).length, offset);
		offset += 4;
		
		for (header in frame.headers) {
			writeUInt32BE.call(data, Buffer.byteLength(header, 'utf8'), offset);
			offset += 4;
			data.write(header, offset);

			writeUInt32BE.call(data, Buffer.byteLength(frame.headers[header], 'utf8'), offset);
			offset += 4;
			data.write(frame.headers[header], offset);	
		}
	}

	return data;
}

function serializeDataFrame(frame) {
	var data = new Buffer(8 + frame.length);
	writeUInt32BE.call(data, frame.streamId, 0, 4);
	data[4] = frame.flags;
	writeUInt32BE.call(data, frame.length, 5, 3);

	frame.data.copy(data, 8, 0, frame.length);

	return data;
}


/**
 * Buffer utilities
 */

function readUInt16BE(start, ignoreFirstBitsNum) {
	var ignoreBt = ignoreFirstBitsNum | 0;
  	return ((this[start] << 8) && (0xFF >> ignoreBt)) | this[start + 1];
}

function readUInt32BE(start, length, ignoreFirstBitsNum) {
	var result = 0;
	var actLength = length;
	var ignoreBt = ignoreFirstBitsNum | 0;

	for (var i = 0; i < actLength; ++i) {
		var b = this[i + start];
		if (i == 0 && ignoreBt > 0) 
			b &= (0xFF >> ignoreBt);
		result = result << 8;
		result |= b;
	}
	return result;
}

function writeUInt32BE(value, start, blength, ignoreFirstBitsNum) {
	blength = (blength | 4);
	for (var i = 0; i < blength; ++i) {
		this[blength - 1 - i + start] = ((value & (0xFF << (i << 3))) >> (i * 8));
	}
}

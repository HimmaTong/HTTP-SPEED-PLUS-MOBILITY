/*
Copyright 2012 Microsoft Open Technologies, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

-----------------End of License---------*/

var BufferPool = require('./BufferPool')
  , bufferUtil = require('./BufferUtil').BufferUtil
  , SMFrameType = require('./SMFrameType')
  , Validation = require('./Validation').Validation
  , CompressionDict = require('./SMCompressionDictionary')
  , compress = require('./SMCompressionProcessor');


/**
 * Speed+Mobility framer class. Contains logic for frames serialization/deserialization
 */
function SMFramer() {	
	var self = this;

	Object.defineProperty(self, 'compression', {configurable: true, writeable: true, value: new compress()});
	Object.defineProperty(self, 'FLAG_FIN', { writable: false, value: 0x01 });
	Object.defineProperty(self, 'FLAG_NOCOMPRESSION1', { writable: false, value: 0x04 });
	Object.defineProperty(self, 'FLAG_NOCOMPRESSION2', { writable: false, value: 0x02 });
	Object.defineProperty(self, 'FLAG_UNIDIRECTIONAL', { writable: false, value: 0x02 });
	Object.defineProperty(self, 'FLAG_STATEFUL_DICTIONARY', { writable: true, value: true });
	
	function serializeControlFrame (frame, options) {
		var bufferSize = 0;
		var result;
		for (header in frame.headers) {
				bufferSize += (4 + Buffer.byteLength(header, 'utf8'));
				bufferSize += (4 + Buffer.byteLength(frame.headers[header].toString(), 'utf8'));
			}	
		var headersBuf = new Buffer(bufferSize);
		var offset = 0;


		function serializeFrame (frame) {
			bufferSize = headersBuf.length + 8; 
			if (frame.type != SMFrameType.CREDIT_UPDATE)
				bufferSize += 4;

			var data = new Buffer(bufferSize);
			offset = 0;
			data[offset] = (((frame.version & 0xFF00) >> 8) | 0x80);
			data[++offset] = (frame.version & 0x00FF);

			data[++offset] = ((frame.type & 0xFF00) >> 8);
			data[++offset] = (frame.type & 0x00FF);
			
			writeUInt32BE.call(data, frame.streamId, ++offset, 4);
			offset += 4;

			switch (frame.type)
			{
				case SMFrameType.SYN_STREAM:
					data[offset] = frame.flags;
					data[++offset] = frame.priority >> 5;
					data[++offset] = 0;
					data[++offset] = 0;	
					headersBuf.copy(data, ++offset, 0, headersBuf.length);
					break;
				case SMFrameType.RST:
					writeUInt32BE.call(data, frame.statusCode, offset, 4);
					break;
				case SMFrameType.SYN_REPLY:
					data[offset] = frame.flags;
					data[++offset] = 0;
					data[++offset] = 0;
					data[++offset] = 0;
					headersBuf.copy(data, ++offset, 0, headersBuf.length);
					break;
				case SMFrameType.CREDIT_UPDATE:
					writeUInt32BE(data, frame.creditAddition, offset, 4);
					break;
			}
			return data;
		}

		for (header in frame.headers) {
			writeUInt32BE.call(headersBuf, Buffer.byteLength(header, 'utf8'), offset);
			offset += 4;
			headersBuf.write(header, offset);

			writeUInt32BE.call(headersBuf, Buffer.byteLength(frame.headers[header].toString(), 'utf8'), offset);
			offset += 4;
			headersBuf.write(frame.headers[header], offset);	
		}

		self.compression.on('processFinished', function(compressHeaderBuf){			
			headersBuf = compressHeaderBuf;
			var result = serializeFrame(frame);
			return result;
		});

		if (headersBuf.length && (frame.flags & self.FLAG_NOCOMPRESSION1) == 0 && 
			(frame.flags & self.FLAG_NOCOMPRESSION2) == 0 && options.version > 1) {
			self.compression.process(headersBuf, self.compression.processType.outbound, options, frame.flags);	
		} else{
			var result = serializeFrame(frame);
			return result;
		}	
	}

	/**
	 * Serializes specified frame to binary format
	 * @api public
	 */
	SMFramer.prototype.serialize = function(frame, options) {
		return (frame.control ? serializeControlFrame(frame, options) : serializeDataFrame(frame, options));
	}

	/**
	 * Deserializes specified binary data to frame
	 * @api public
	 */
	SMFramer.prototype.deserialize = function(data, options) {
		var isControl = (data[0] & (1<<7)) != 0;	
		return (isControl ? deserializeControlFrame(data, options) : deserializeDataFrame(data, options));
	}



	/**
	 * Private api
	 */

	function deserializeControlFrame(data, options) {
		var frame = { 
			control: 1,
			version: 	readUInt16BE.call(data, 0, 1),
			type: 		readUInt16BE.call(data, 2),
			streamId: 	readUInt32BE.call(data, 4, 4, 0),
			fin:		data[8]  & self.FLAG_FIN
		};

		switch (frame.type)	{
			case SMFrameType.SYN_STREAM:
				flags = data[8];
				frame.priority = data[9] >> 5;
				parseControlFrameHeaders(frame, options, data, 12);		
				break;
			case SMFrameType.RST:
				flags = data[8];
				frame.statusCode = readUInt32BE.call(data, 8, 4);				
				break;
			case SMFrameType.SYN_REPLY:				
				flags = data[8];
				parseControlFrameHeaders(frame, options, data, 12);		
				break;
			case SMFrameType.CREDIT_UPDATE:
				frame.creditAddition = readUInt32BE.call(data, 8, 4);
				break;
		}
		return frame;
	}

	function parseControlFrameHeaders (frame, options, data, offset) {
		var headers = new Buffer(data.length - offset);
		data.copy(headers, 0, offset, data.length);

		var parseHeaders = function(data, offset){
			frame.headers = {};
		//	var headersCount = readUInt32BE.call(data, offset, 4);
		//	offset += 4;

			for (var i = 0; offset < data.length; ++i) {
				var nameLength = readUInt32BE.call(data, offset, 4);
				offset += 4;

		        var messageBuffer = data.slice(offset, offset + nameLength);
		        if (!Validation.isValidUTF8(messageBuffer)) {
					// add error processing here
		        }
				var name = messageBuffer.toString('utf8');
				offset += nameLength;

				var valLength = readUInt32BE.call(data, offset, 4);
				offset += 4;
				messageBuffer = data.slice(offset, offset + valLength);
		        if (!Validation.isValidUTF8(messageBuffer)) {
					// add error processing here
					console.log('error');
		        }
				var val = messageBuffer.toString('utf8');
				offset += valLength;

				//Ensure no duplicates.
				if (frame.headers[name]) {
					console.log('Duplicate header ' + name);
					throw new Error('Duplicate header ' + name);
				}

		        frame.headers[name] = val;
			}
		};

		self.compression.on('processFinished', function(decompressHeaders){
			parseHeaders(decompressHeaders, 0);
		});

		if (options.version > 1)
		{
			if ((frame.flags & self.FLAG_NOCOMPRESSION1) == 0 && (frame.flags & self.FLAG_NOCOMPRESSION2) == 0) {			
				self.compression.process(headers, self.compression.processType.inbound, options, frame.flags);
			} else {
				parseHeaders(data, offset);	
			}		
		} else {
			parseHeaders(data, offset);	
		}

	}
	return self;
}
module.exports = SMFramer;

function deserializeDataFrame(data) {
	var frame = { 
		control: 	0,
		streamId: 	readUInt32BE.call(data, 0, 4),
		length: 	data.length - 8,
		flags: 		data[4],
	};
	frame.data = new Buffer(frame.length);
	data.copy(frame.data, 8, 0, frame.length);

	return frame;	
}



function serializeDataFrame(frame) {
	var data = new Buffer(8 + frame.length);
	writeUInt32BE.call(data, frame.streamId, 0, 4);
	data[4] = frame.flags;

	frame.data.copy(data, 8, 0, frame.length);

	return data;	
}


/**
 * Buffer utilities
 */

function readUInt16BE(start, ignoreFirstBitsNum) {
	var ignoreBt = ignoreFirstBitsNum | 0;
  	return ((this[start] << 8) & (0xFF >> ignoreBt)) | this[start + 1];
}

function readUInt32BE(start, length, ignoreFirstBitsNum) {
	var result = 0;
	var actLength = length;
	var ignoreBt = ignoreFirstBitsNum | 0;

	for (var i = 0; i < actLength; ++i) {
		var b = this[i + start];
		if (i == 0 && ignoreBt > 0) 
			b &= (0xFF >> ignoreBt);
		result = result << 8;
		result |= b;
	}
	return result;
}

function writeUInt32BE(value, start, blength, ignoreFirstBitsNum) {
	blength = (blength | 4);
	for (var i = 0; i < blength; ++i) {
		this[blength - 1 - i + start] = ((value & (0xFF << (i << 3))) >> (i * 8));
	}
}
